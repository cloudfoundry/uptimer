// Code generated by counterfeiter. DO NOT EDIT.
package cfCmdGeneratorfakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/uptimer/cfCmdGenerator"
	"github.com/cloudfoundry/uptimer/cmdStartWaiter"
)

type FakeCfCmdGenerator struct {
	ApiStub        func(string) cmdStartWaiter.CmdStartWaiter
	apiMutex       sync.RWMutex
	apiArgsForCall []struct {
		arg1 string
	}
	apiReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	apiReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	AuthStub        func(string, string) cmdStartWaiter.CmdStartWaiter
	authMutex       sync.RWMutex
	authArgsForCall []struct {
		arg1 string
		arg2 string
	}
	authReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	authReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	BindServiceStub        func(string, string) cmdStartWaiter.CmdStartWaiter
	bindServiceMutex       sync.RWMutex
	bindServiceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindServiceReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	bindServiceReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	CreateOrgStub        func(string) cmdStartWaiter.CmdStartWaiter
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		arg1 string
	}
	createOrgReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	createOrgReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	CreateQuotaStub        func(string) cmdStartWaiter.CmdStartWaiter
	createQuotaMutex       sync.RWMutex
	createQuotaArgsForCall []struct {
		arg1 string
	}
	createQuotaReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	createQuotaReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	CreateSpaceStub        func(string, string) cmdStartWaiter.CmdStartWaiter
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createSpaceReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	createSpaceReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	CreateUserProvidedServiceStub        func(string, string) cmdStartWaiter.CmdStartWaiter
	createUserProvidedServiceMutex       sync.RWMutex
	createUserProvidedServiceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createUserProvidedServiceReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	createUserProvidedServiceReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	DeleteStub        func(string) cmdStartWaiter.CmdStartWaiter
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	deleteReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	DeleteOrgStub        func(string) cmdStartWaiter.CmdStartWaiter
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		arg1 string
	}
	deleteOrgReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	deleteOrgReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	DeleteQuotaStub        func(string) cmdStartWaiter.CmdStartWaiter
	deleteQuotaMutex       sync.RWMutex
	deleteQuotaArgsForCall []struct {
		arg1 string
	}
	deleteQuotaReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	deleteQuotaReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	LogOutStub        func() cmdStartWaiter.CmdStartWaiter
	logOutMutex       sync.RWMutex
	logOutArgsForCall []struct {
	}
	logOutReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	logOutReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	MapRouteStub        func(string, string, int) cmdStartWaiter.CmdStartWaiter
	mapRouteMutex       sync.RWMutex
	mapRouteArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
	}
	mapRouteReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	mapRouteReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	PushStub        func(string, string, int, bool) cmdStartWaiter.CmdStartWaiter
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
		arg4 bool
	}
	pushReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	pushReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	RecentLogsStub        func(string) cmdStartWaiter.CmdStartWaiter
	recentLogsMutex       sync.RWMutex
	recentLogsArgsForCall []struct {
		arg1 string
	}
	recentLogsReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	recentLogsReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	RestageStub        func(string) cmdStartWaiter.CmdStartWaiter
	restageMutex       sync.RWMutex
	restageArgsForCall []struct {
		arg1 string
	}
	restageReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	restageReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	SetQuotaStub        func(string, string) cmdStartWaiter.CmdStartWaiter
	setQuotaMutex       sync.RWMutex
	setQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setQuotaReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	setQuotaReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	StreamLogsStub        func(context.Context, string) cmdStartWaiter.CmdStartWaiter
	streamLogsMutex       sync.RWMutex
	streamLogsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	streamLogsReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	streamLogsReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	TargetStub        func(string, string) cmdStartWaiter.CmdStartWaiter
	targetMutex       sync.RWMutex
	targetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	targetReturns struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	targetReturnsOnCall map[int]struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfCmdGenerator) Api(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.apiMutex.Lock()
	ret, specificReturn := fake.apiReturnsOnCall[len(fake.apiArgsForCall)]
	fake.apiArgsForCall = append(fake.apiArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ApiStub
	fakeReturns := fake.apiReturns
	fake.recordInvocation("Api", []interface{}{arg1})
	fake.apiMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) ApiCallCount() int {
	fake.apiMutex.RLock()
	defer fake.apiMutex.RUnlock()
	return len(fake.apiArgsForCall)
}

func (fake *FakeCfCmdGenerator) ApiCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.apiMutex.Lock()
	defer fake.apiMutex.Unlock()
	fake.ApiStub = stub
}

func (fake *FakeCfCmdGenerator) ApiArgsForCall(i int) string {
	fake.apiMutex.RLock()
	defer fake.apiMutex.RUnlock()
	argsForCall := fake.apiArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) ApiReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.apiMutex.Lock()
	defer fake.apiMutex.Unlock()
	fake.ApiStub = nil
	fake.apiReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) ApiReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.apiMutex.Lock()
	defer fake.apiMutex.Unlock()
	fake.ApiStub = nil
	if fake.apiReturnsOnCall == nil {
		fake.apiReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.apiReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Auth(arg1 string, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.authMutex.Lock()
	ret, specificReturn := fake.authReturnsOnCall[len(fake.authArgsForCall)]
	fake.authArgsForCall = append(fake.authArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AuthStub
	fakeReturns := fake.authReturns
	fake.recordInvocation("Auth", []interface{}{arg1, arg2})
	fake.authMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) AuthCallCount() int {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return len(fake.authArgsForCall)
}

func (fake *FakeCfCmdGenerator) AuthCalls(stub func(string, string) cmdStartWaiter.CmdStartWaiter) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = stub
}

func (fake *FakeCfCmdGenerator) AuthArgsForCall(i int) (string, string) {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	argsForCall := fake.authArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) AuthReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	fake.authReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) AuthReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	if fake.authReturnsOnCall == nil {
		fake.authReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.authReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) BindService(arg1 string, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.bindServiceMutex.Lock()
	ret, specificReturn := fake.bindServiceReturnsOnCall[len(fake.bindServiceArgsForCall)]
	fake.bindServiceArgsForCall = append(fake.bindServiceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.BindServiceStub
	fakeReturns := fake.bindServiceReturns
	fake.recordInvocation("BindService", []interface{}{arg1, arg2})
	fake.bindServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) BindServiceCallCount() int {
	fake.bindServiceMutex.RLock()
	defer fake.bindServiceMutex.RUnlock()
	return len(fake.bindServiceArgsForCall)
}

func (fake *FakeCfCmdGenerator) BindServiceCalls(stub func(string, string) cmdStartWaiter.CmdStartWaiter) {
	fake.bindServiceMutex.Lock()
	defer fake.bindServiceMutex.Unlock()
	fake.BindServiceStub = stub
}

func (fake *FakeCfCmdGenerator) BindServiceArgsForCall(i int) (string, string) {
	fake.bindServiceMutex.RLock()
	defer fake.bindServiceMutex.RUnlock()
	argsForCall := fake.bindServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) BindServiceReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.bindServiceMutex.Lock()
	defer fake.bindServiceMutex.Unlock()
	fake.BindServiceStub = nil
	fake.bindServiceReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) BindServiceReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.bindServiceMutex.Lock()
	defer fake.bindServiceMutex.Unlock()
	fake.BindServiceStub = nil
	if fake.bindServiceReturnsOnCall == nil {
		fake.bindServiceReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.bindServiceReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateOrg(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.createOrgMutex.Lock()
	ret, specificReturn := fake.createOrgReturnsOnCall[len(fake.createOrgArgsForCall)]
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateOrgStub
	fakeReturns := fake.createOrgReturns
	fake.recordInvocation("CreateOrg", []interface{}{arg1})
	fake.createOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeCfCmdGenerator) CreateOrgCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = stub
}

func (fake *FakeCfCmdGenerator) CreateOrgArgsForCall(i int) string {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	argsForCall := fake.createOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) CreateOrgReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateOrgReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	if fake.createOrgReturnsOnCall == nil {
		fake.createOrgReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.createOrgReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateQuota(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.createQuotaMutex.Lock()
	ret, specificReturn := fake.createQuotaReturnsOnCall[len(fake.createQuotaArgsForCall)]
	fake.createQuotaArgsForCall = append(fake.createQuotaArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateQuotaStub
	fakeReturns := fake.createQuotaReturns
	fake.recordInvocation("CreateQuota", []interface{}{arg1})
	fake.createQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) CreateQuotaCallCount() int {
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	return len(fake.createQuotaArgsForCall)
}

func (fake *FakeCfCmdGenerator) CreateQuotaCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.createQuotaMutex.Lock()
	defer fake.createQuotaMutex.Unlock()
	fake.CreateQuotaStub = stub
}

func (fake *FakeCfCmdGenerator) CreateQuotaArgsForCall(i int) string {
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	argsForCall := fake.createQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) CreateQuotaReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createQuotaMutex.Lock()
	defer fake.createQuotaMutex.Unlock()
	fake.CreateQuotaStub = nil
	fake.createQuotaReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateQuotaReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createQuotaMutex.Lock()
	defer fake.createQuotaMutex.Unlock()
	fake.CreateQuotaStub = nil
	if fake.createQuotaReturnsOnCall == nil {
		fake.createQuotaReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.createQuotaReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateSpace(arg1 string, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.createSpaceMutex.Lock()
	ret, specificReturn := fake.createSpaceReturnsOnCall[len(fake.createSpaceArgsForCall)]
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateSpaceStub
	fakeReturns := fake.createSpaceReturns
	fake.recordInvocation("CreateSpace", []interface{}{arg1, arg2})
	fake.createSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeCfCmdGenerator) CreateSpaceCalls(stub func(string, string) cmdStartWaiter.CmdStartWaiter) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = stub
}

func (fake *FakeCfCmdGenerator) CreateSpaceArgsForCall(i int) (string, string) {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	argsForCall := fake.createSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) CreateSpaceReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateSpaceReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	if fake.createSpaceReturnsOnCall == nil {
		fake.createSpaceReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.createSpaceReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateUserProvidedService(arg1 string, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.createUserProvidedServiceMutex.Lock()
	ret, specificReturn := fake.createUserProvidedServiceReturnsOnCall[len(fake.createUserProvidedServiceArgsForCall)]
	fake.createUserProvidedServiceArgsForCall = append(fake.createUserProvidedServiceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateUserProvidedServiceStub
	fakeReturns := fake.createUserProvidedServiceReturns
	fake.recordInvocation("CreateUserProvidedService", []interface{}{arg1, arg2})
	fake.createUserProvidedServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) CreateUserProvidedServiceCallCount() int {
	fake.createUserProvidedServiceMutex.RLock()
	defer fake.createUserProvidedServiceMutex.RUnlock()
	return len(fake.createUserProvidedServiceArgsForCall)
}

func (fake *FakeCfCmdGenerator) CreateUserProvidedServiceCalls(stub func(string, string) cmdStartWaiter.CmdStartWaiter) {
	fake.createUserProvidedServiceMutex.Lock()
	defer fake.createUserProvidedServiceMutex.Unlock()
	fake.CreateUserProvidedServiceStub = stub
}

func (fake *FakeCfCmdGenerator) CreateUserProvidedServiceArgsForCall(i int) (string, string) {
	fake.createUserProvidedServiceMutex.RLock()
	defer fake.createUserProvidedServiceMutex.RUnlock()
	argsForCall := fake.createUserProvidedServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) CreateUserProvidedServiceReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createUserProvidedServiceMutex.Lock()
	defer fake.createUserProvidedServiceMutex.Unlock()
	fake.CreateUserProvidedServiceStub = nil
	fake.createUserProvidedServiceReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) CreateUserProvidedServiceReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.createUserProvidedServiceMutex.Lock()
	defer fake.createUserProvidedServiceMutex.Unlock()
	fake.CreateUserProvidedServiceStub = nil
	if fake.createUserProvidedServiceReturnsOnCall == nil {
		fake.createUserProvidedServiceReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.createUserProvidedServiceReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Delete(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCfCmdGenerator) DeleteCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCfCmdGenerator) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) DeleteReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) DeleteReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) DeleteOrg(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.deleteOrgMutex.Lock()
	ret, specificReturn := fake.deleteOrgReturnsOnCall[len(fake.deleteOrgArgsForCall)]
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteOrgStub
	fakeReturns := fake.deleteOrgReturns
	fake.recordInvocation("DeleteOrg", []interface{}{arg1})
	fake.deleteOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeCfCmdGenerator) DeleteOrgCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = stub
}

func (fake *FakeCfCmdGenerator) DeleteOrgArgsForCall(i int) string {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	argsForCall := fake.deleteOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) DeleteOrgReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) DeleteOrgReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	if fake.deleteOrgReturnsOnCall == nil {
		fake.deleteOrgReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.deleteOrgReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) DeleteQuota(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.deleteQuotaMutex.Lock()
	ret, specificReturn := fake.deleteQuotaReturnsOnCall[len(fake.deleteQuotaArgsForCall)]
	fake.deleteQuotaArgsForCall = append(fake.deleteQuotaArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteQuotaStub
	fakeReturns := fake.deleteQuotaReturns
	fake.recordInvocation("DeleteQuota", []interface{}{arg1})
	fake.deleteQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) DeleteQuotaCallCount() int {
	fake.deleteQuotaMutex.RLock()
	defer fake.deleteQuotaMutex.RUnlock()
	return len(fake.deleteQuotaArgsForCall)
}

func (fake *FakeCfCmdGenerator) DeleteQuotaCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.deleteQuotaMutex.Lock()
	defer fake.deleteQuotaMutex.Unlock()
	fake.DeleteQuotaStub = stub
}

func (fake *FakeCfCmdGenerator) DeleteQuotaArgsForCall(i int) string {
	fake.deleteQuotaMutex.RLock()
	defer fake.deleteQuotaMutex.RUnlock()
	argsForCall := fake.deleteQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) DeleteQuotaReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.deleteQuotaMutex.Lock()
	defer fake.deleteQuotaMutex.Unlock()
	fake.DeleteQuotaStub = nil
	fake.deleteQuotaReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) DeleteQuotaReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.deleteQuotaMutex.Lock()
	defer fake.deleteQuotaMutex.Unlock()
	fake.DeleteQuotaStub = nil
	if fake.deleteQuotaReturnsOnCall == nil {
		fake.deleteQuotaReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.deleteQuotaReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) LogOut() cmdStartWaiter.CmdStartWaiter {
	fake.logOutMutex.Lock()
	ret, specificReturn := fake.logOutReturnsOnCall[len(fake.logOutArgsForCall)]
	fake.logOutArgsForCall = append(fake.logOutArgsForCall, struct {
	}{})
	stub := fake.LogOutStub
	fakeReturns := fake.logOutReturns
	fake.recordInvocation("LogOut", []interface{}{})
	fake.logOutMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) LogOutCallCount() int {
	fake.logOutMutex.RLock()
	defer fake.logOutMutex.RUnlock()
	return len(fake.logOutArgsForCall)
}

func (fake *FakeCfCmdGenerator) LogOutCalls(stub func() cmdStartWaiter.CmdStartWaiter) {
	fake.logOutMutex.Lock()
	defer fake.logOutMutex.Unlock()
	fake.LogOutStub = stub
}

func (fake *FakeCfCmdGenerator) LogOutReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.logOutMutex.Lock()
	defer fake.logOutMutex.Unlock()
	fake.LogOutStub = nil
	fake.logOutReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) LogOutReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.logOutMutex.Lock()
	defer fake.logOutMutex.Unlock()
	fake.LogOutStub = nil
	if fake.logOutReturnsOnCall == nil {
		fake.logOutReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.logOutReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) MapRoute(arg1 string, arg2 string, arg3 int) cmdStartWaiter.CmdStartWaiter {
	fake.mapRouteMutex.Lock()
	ret, specificReturn := fake.mapRouteReturnsOnCall[len(fake.mapRouteArgsForCall)]
	fake.mapRouteArgsForCall = append(fake.mapRouteArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.MapRouteStub
	fakeReturns := fake.mapRouteReturns
	fake.recordInvocation("MapRoute", []interface{}{arg1, arg2, arg3})
	fake.mapRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) MapRouteCallCount() int {
	fake.mapRouteMutex.RLock()
	defer fake.mapRouteMutex.RUnlock()
	return len(fake.mapRouteArgsForCall)
}

func (fake *FakeCfCmdGenerator) MapRouteCalls(stub func(string, string, int) cmdStartWaiter.CmdStartWaiter) {
	fake.mapRouteMutex.Lock()
	defer fake.mapRouteMutex.Unlock()
	fake.MapRouteStub = stub
}

func (fake *FakeCfCmdGenerator) MapRouteArgsForCall(i int) (string, string, int) {
	fake.mapRouteMutex.RLock()
	defer fake.mapRouteMutex.RUnlock()
	argsForCall := fake.mapRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCfCmdGenerator) MapRouteReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.mapRouteMutex.Lock()
	defer fake.mapRouteMutex.Unlock()
	fake.MapRouteStub = nil
	fake.mapRouteReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) MapRouteReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.mapRouteMutex.Lock()
	defer fake.mapRouteMutex.Unlock()
	fake.MapRouteStub = nil
	if fake.mapRouteReturnsOnCall == nil {
		fake.mapRouteReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.mapRouteReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Push(arg1 string, arg2 string, arg3 int, arg4 bool) cmdStartWaiter.CmdStartWaiter {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	stub := fake.PushStub
	fakeReturns := fake.pushReturns
	fake.recordInvocation("Push", []interface{}{arg1, arg2, arg3, arg4})
	fake.pushMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeCfCmdGenerator) PushCalls(stub func(string, string, int, bool) cmdStartWaiter.CmdStartWaiter) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeCfCmdGenerator) PushArgsForCall(i int) (string, string, int, bool) {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	argsForCall := fake.pushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCfCmdGenerator) PushReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) PushReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) RecentLogs(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.recentLogsMutex.Lock()
	ret, specificReturn := fake.recentLogsReturnsOnCall[len(fake.recentLogsArgsForCall)]
	fake.recentLogsArgsForCall = append(fake.recentLogsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RecentLogsStub
	fakeReturns := fake.recentLogsReturns
	fake.recordInvocation("RecentLogs", []interface{}{arg1})
	fake.recentLogsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) RecentLogsCallCount() int {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return len(fake.recentLogsArgsForCall)
}

func (fake *FakeCfCmdGenerator) RecentLogsCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.recentLogsMutex.Lock()
	defer fake.recentLogsMutex.Unlock()
	fake.RecentLogsStub = stub
}

func (fake *FakeCfCmdGenerator) RecentLogsArgsForCall(i int) string {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	argsForCall := fake.recentLogsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) RecentLogsReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.recentLogsMutex.Lock()
	defer fake.recentLogsMutex.Unlock()
	fake.RecentLogsStub = nil
	fake.recentLogsReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) RecentLogsReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.recentLogsMutex.Lock()
	defer fake.recentLogsMutex.Unlock()
	fake.RecentLogsStub = nil
	if fake.recentLogsReturnsOnCall == nil {
		fake.recentLogsReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.recentLogsReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Restage(arg1 string) cmdStartWaiter.CmdStartWaiter {
	fake.restageMutex.Lock()
	ret, specificReturn := fake.restageReturnsOnCall[len(fake.restageArgsForCall)]
	fake.restageArgsForCall = append(fake.restageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RestageStub
	fakeReturns := fake.restageReturns
	fake.recordInvocation("Restage", []interface{}{arg1})
	fake.restageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) RestageCallCount() int {
	fake.restageMutex.RLock()
	defer fake.restageMutex.RUnlock()
	return len(fake.restageArgsForCall)
}

func (fake *FakeCfCmdGenerator) RestageCalls(stub func(string) cmdStartWaiter.CmdStartWaiter) {
	fake.restageMutex.Lock()
	defer fake.restageMutex.Unlock()
	fake.RestageStub = stub
}

func (fake *FakeCfCmdGenerator) RestageArgsForCall(i int) string {
	fake.restageMutex.RLock()
	defer fake.restageMutex.RUnlock()
	argsForCall := fake.restageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCfCmdGenerator) RestageReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.restageMutex.Lock()
	defer fake.restageMutex.Unlock()
	fake.RestageStub = nil
	fake.restageReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) RestageReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.restageMutex.Lock()
	defer fake.restageMutex.Unlock()
	fake.RestageStub = nil
	if fake.restageReturnsOnCall == nil {
		fake.restageReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.restageReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) SetQuota(arg1 string, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.setQuotaMutex.Lock()
	ret, specificReturn := fake.setQuotaReturnsOnCall[len(fake.setQuotaArgsForCall)]
	fake.setQuotaArgsForCall = append(fake.setQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SetQuotaStub
	fakeReturns := fake.setQuotaReturns
	fake.recordInvocation("SetQuota", []interface{}{arg1, arg2})
	fake.setQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) SetQuotaCallCount() int {
	fake.setQuotaMutex.RLock()
	defer fake.setQuotaMutex.RUnlock()
	return len(fake.setQuotaArgsForCall)
}

func (fake *FakeCfCmdGenerator) SetQuotaCalls(stub func(string, string) cmdStartWaiter.CmdStartWaiter) {
	fake.setQuotaMutex.Lock()
	defer fake.setQuotaMutex.Unlock()
	fake.SetQuotaStub = stub
}

func (fake *FakeCfCmdGenerator) SetQuotaArgsForCall(i int) (string, string) {
	fake.setQuotaMutex.RLock()
	defer fake.setQuotaMutex.RUnlock()
	argsForCall := fake.setQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) SetQuotaReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.setQuotaMutex.Lock()
	defer fake.setQuotaMutex.Unlock()
	fake.SetQuotaStub = nil
	fake.setQuotaReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) SetQuotaReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.setQuotaMutex.Lock()
	defer fake.setQuotaMutex.Unlock()
	fake.SetQuotaStub = nil
	if fake.setQuotaReturnsOnCall == nil {
		fake.setQuotaReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.setQuotaReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) StreamLogs(arg1 context.Context, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.streamLogsMutex.Lock()
	ret, specificReturn := fake.streamLogsReturnsOnCall[len(fake.streamLogsArgsForCall)]
	fake.streamLogsArgsForCall = append(fake.streamLogsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.StreamLogsStub
	fakeReturns := fake.streamLogsReturns
	fake.recordInvocation("StreamLogs", []interface{}{arg1, arg2})
	fake.streamLogsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) StreamLogsCallCount() int {
	fake.streamLogsMutex.RLock()
	defer fake.streamLogsMutex.RUnlock()
	return len(fake.streamLogsArgsForCall)
}

func (fake *FakeCfCmdGenerator) StreamLogsCalls(stub func(context.Context, string) cmdStartWaiter.CmdStartWaiter) {
	fake.streamLogsMutex.Lock()
	defer fake.streamLogsMutex.Unlock()
	fake.StreamLogsStub = stub
}

func (fake *FakeCfCmdGenerator) StreamLogsArgsForCall(i int) (context.Context, string) {
	fake.streamLogsMutex.RLock()
	defer fake.streamLogsMutex.RUnlock()
	argsForCall := fake.streamLogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) StreamLogsReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.streamLogsMutex.Lock()
	defer fake.streamLogsMutex.Unlock()
	fake.StreamLogsStub = nil
	fake.streamLogsReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) StreamLogsReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.streamLogsMutex.Lock()
	defer fake.streamLogsMutex.Unlock()
	fake.StreamLogsStub = nil
	if fake.streamLogsReturnsOnCall == nil {
		fake.streamLogsReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.streamLogsReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Target(arg1 string, arg2 string) cmdStartWaiter.CmdStartWaiter {
	fake.targetMutex.Lock()
	ret, specificReturn := fake.targetReturnsOnCall[len(fake.targetArgsForCall)]
	fake.targetArgsForCall = append(fake.targetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.TargetStub
	fakeReturns := fake.targetReturns
	fake.recordInvocation("Target", []interface{}{arg1, arg2})
	fake.targetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCfCmdGenerator) TargetCallCount() int {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return len(fake.targetArgsForCall)
}

func (fake *FakeCfCmdGenerator) TargetCalls(stub func(string, string) cmdStartWaiter.CmdStartWaiter) {
	fake.targetMutex.Lock()
	defer fake.targetMutex.Unlock()
	fake.TargetStub = stub
}

func (fake *FakeCfCmdGenerator) TargetArgsForCall(i int) (string, string) {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	argsForCall := fake.targetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfCmdGenerator) TargetReturns(result1 cmdStartWaiter.CmdStartWaiter) {
	fake.targetMutex.Lock()
	defer fake.targetMutex.Unlock()
	fake.TargetStub = nil
	fake.targetReturns = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) TargetReturnsOnCall(i int, result1 cmdStartWaiter.CmdStartWaiter) {
	fake.targetMutex.Lock()
	defer fake.targetMutex.Unlock()
	fake.TargetStub = nil
	if fake.targetReturnsOnCall == nil {
		fake.targetReturnsOnCall = make(map[int]struct {
			result1 cmdStartWaiter.CmdStartWaiter
		})
	}
	fake.targetReturnsOnCall[i] = struct {
		result1 cmdStartWaiter.CmdStartWaiter
	}{result1}
}

func (fake *FakeCfCmdGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.apiMutex.RLock()
	defer fake.apiMutex.RUnlock()
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	fake.bindServiceMutex.RLock()
	defer fake.bindServiceMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.createQuotaMutex.RLock()
	defer fake.createQuotaMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.createUserProvidedServiceMutex.RLock()
	defer fake.createUserProvidedServiceMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.deleteQuotaMutex.RLock()
	defer fake.deleteQuotaMutex.RUnlock()
	fake.logOutMutex.RLock()
	defer fake.logOutMutex.RUnlock()
	fake.mapRouteMutex.RLock()
	defer fake.mapRouteMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	fake.restageMutex.RLock()
	defer fake.restageMutex.RUnlock()
	fake.setQuotaMutex.RLock()
	defer fake.setQuotaMutex.RUnlock()
	fake.streamLogsMutex.RLock()
	defer fake.streamLogsMutex.RUnlock()
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfCmdGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfCmdGenerator.CfCmdGenerator = new(FakeCfCmdGenerator)
